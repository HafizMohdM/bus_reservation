/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.esq.bus.reservation.slayers.model.impl;

import com.esq.bus.reservation.slayers.model.Passenger;
import com.esq.bus.reservation.slayers.model.PassengerModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Passenger service. Represents a row in the &quot;BOOKRESERVATION_Passenger&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PassengerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PassengerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PassengerImpl
 * @generated
 */
public class PassengerModelImpl
	extends BaseModelImpl<Passenger> implements PassengerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a passenger model instance should use the <code>Passenger</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOOKRESERVATION_Passenger";

	public static final Object[][] TABLE_COLUMNS = {
		{"passengerId", Types.BIGINT}, {"passengerName", Types.VARCHAR},
		{"passengerContact", Types.VARCHAR}, {"passengerEmail", Types.VARCHAR},
		{"username", Types.VARCHAR}, {"password_", Types.VARCHAR},
		{"accountStatus", Types.INTEGER}, {"userId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("passengerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("passengerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("passengerContact", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("passengerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accountStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOOKRESERVATION_Passenger (passengerId LONG not null primary key,passengerName VARCHAR(75) null,passengerContact VARCHAR(75) null,passengerEmail VARCHAR(75) null,username VARCHAR(75) null,password_ VARCHAR(75) null,accountStatus INTEGER,userId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table BOOKRESERVATION_Passenger";

	public static final String ORDER_BY_JPQL =
		" ORDER BY passenger.passengerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOOKRESERVATION_Passenger.passengerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PASSENGEREMAIL_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PASSENGERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PassengerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _passengerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPassengerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _passengerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Passenger.class;
	}

	@Override
	public String getModelClassName() {
		return Passenger.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Passenger, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Passenger, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Passenger, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Passenger)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Passenger, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Passenger, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Passenger)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Passenger, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Passenger, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Passenger, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Passenger, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Passenger, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Passenger, Object>>();
		Map<String, BiConsumer<Passenger, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Passenger, ?>>();

		attributeGetterFunctions.put("passengerId", Passenger::getPassengerId);
		attributeSetterBiConsumers.put(
			"passengerId",
			(BiConsumer<Passenger, Long>)Passenger::setPassengerId);
		attributeGetterFunctions.put(
			"passengerName", Passenger::getPassengerName);
		attributeSetterBiConsumers.put(
			"passengerName",
			(BiConsumer<Passenger, String>)Passenger::setPassengerName);
		attributeGetterFunctions.put(
			"passengerContact", Passenger::getPassengerContact);
		attributeSetterBiConsumers.put(
			"passengerContact",
			(BiConsumer<Passenger, String>)Passenger::setPassengerContact);
		attributeGetterFunctions.put(
			"passengerEmail", Passenger::getPassengerEmail);
		attributeSetterBiConsumers.put(
			"passengerEmail",
			(BiConsumer<Passenger, String>)Passenger::setPassengerEmail);
		attributeGetterFunctions.put("username", Passenger::getUsername);
		attributeSetterBiConsumers.put(
			"username", (BiConsumer<Passenger, String>)Passenger::setUsername);
		attributeGetterFunctions.put("password", Passenger::getPassword);
		attributeSetterBiConsumers.put(
			"password", (BiConsumer<Passenger, String>)Passenger::setPassword);
		attributeGetterFunctions.put(
			"accountStatus", Passenger::getAccountStatus);
		attributeSetterBiConsumers.put(
			"accountStatus",
			(BiConsumer<Passenger, Integer>)Passenger::setAccountStatus);
		attributeGetterFunctions.put("userId", Passenger::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Passenger, Long>)Passenger::setUserId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getPassengerId() {
		return _passengerId;
	}

	@Override
	public void setPassengerId(long passengerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_passengerId = passengerId;
	}

	@Override
	public String getPassengerName() {
		if (_passengerName == null) {
			return "";
		}
		else {
			return _passengerName;
		}
	}

	@Override
	public void setPassengerName(String passengerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_passengerName = passengerName;
	}

	@Override
	public String getPassengerContact() {
		if (_passengerContact == null) {
			return "";
		}
		else {
			return _passengerContact;
		}
	}

	@Override
	public void setPassengerContact(String passengerContact) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_passengerContact = passengerContact;
	}

	@Override
	public String getPassengerEmail() {
		if (_passengerEmail == null) {
			return "";
		}
		else {
			return _passengerEmail;
		}
	}

	@Override
	public void setPassengerEmail(String passengerEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_passengerEmail = passengerEmail;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPassengerEmail() {
		return getColumnOriginalValue("passengerEmail");
	}

	@Override
	public String getUsername() {
		if (_username == null) {
			return "";
		}
		else {
			return _username;
		}
	}

	@Override
	public void setUsername(String username) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_username = username;
	}

	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_password = password;
	}

	@Override
	public int getAccountStatus() {
		return _accountStatus;
	}

	@Override
	public void setAccountStatus(int accountStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountStatus = accountStatus;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Passenger.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Passenger toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Passenger>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PassengerImpl passengerImpl = new PassengerImpl();

		passengerImpl.setPassengerId(getPassengerId());
		passengerImpl.setPassengerName(getPassengerName());
		passengerImpl.setPassengerContact(getPassengerContact());
		passengerImpl.setPassengerEmail(getPassengerEmail());
		passengerImpl.setUsername(getUsername());
		passengerImpl.setPassword(getPassword());
		passengerImpl.setAccountStatus(getAccountStatus());
		passengerImpl.setUserId(getUserId());

		passengerImpl.resetOriginalValues();

		return passengerImpl;
	}

	@Override
	public Passenger cloneWithOriginalValues() {
		PassengerImpl passengerImpl = new PassengerImpl();

		passengerImpl.setPassengerId(
			this.<Long>getColumnOriginalValue("passengerId"));
		passengerImpl.setPassengerName(
			this.<String>getColumnOriginalValue("passengerName"));
		passengerImpl.setPassengerContact(
			this.<String>getColumnOriginalValue("passengerContact"));
		passengerImpl.setPassengerEmail(
			this.<String>getColumnOriginalValue("passengerEmail"));
		passengerImpl.setUsername(
			this.<String>getColumnOriginalValue("username"));
		passengerImpl.setPassword(
			this.<String>getColumnOriginalValue("password_"));
		passengerImpl.setAccountStatus(
			this.<Integer>getColumnOriginalValue("accountStatus"));
		passengerImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));

		return passengerImpl;
	}

	@Override
	public int compareTo(Passenger passenger) {
		long primaryKey = passenger.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Passenger)) {
			return false;
		}

		Passenger passenger = (Passenger)object;

		long primaryKey = passenger.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Passenger> toCacheModel() {
		PassengerCacheModel passengerCacheModel = new PassengerCacheModel();

		passengerCacheModel.passengerId = getPassengerId();

		passengerCacheModel.passengerName = getPassengerName();

		String passengerName = passengerCacheModel.passengerName;

		if ((passengerName != null) && (passengerName.length() == 0)) {
			passengerCacheModel.passengerName = null;
		}

		passengerCacheModel.passengerContact = getPassengerContact();

		String passengerContact = passengerCacheModel.passengerContact;

		if ((passengerContact != null) && (passengerContact.length() == 0)) {
			passengerCacheModel.passengerContact = null;
		}

		passengerCacheModel.passengerEmail = getPassengerEmail();

		String passengerEmail = passengerCacheModel.passengerEmail;

		if ((passengerEmail != null) && (passengerEmail.length() == 0)) {
			passengerCacheModel.passengerEmail = null;
		}

		passengerCacheModel.username = getUsername();

		String username = passengerCacheModel.username;

		if ((username != null) && (username.length() == 0)) {
			passengerCacheModel.username = null;
		}

		passengerCacheModel.password = getPassword();

		String password = passengerCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			passengerCacheModel.password = null;
		}

		passengerCacheModel.accountStatus = getAccountStatus();

		passengerCacheModel.userId = getUserId();

		return passengerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Passenger, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Passenger, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Passenger, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Passenger)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Passenger>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Passenger.class, ModelWrapper.class);

	}

	private long _passengerId;
	private String _passengerName;
	private String _passengerContact;
	private String _passengerEmail;
	private String _username;
	private String _password;
	private int _accountStatus;
	private long _userId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Passenger, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Passenger)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("passengerId", _passengerId);
		_columnOriginalValues.put("passengerName", _passengerName);
		_columnOriginalValues.put("passengerContact", _passengerContact);
		_columnOriginalValues.put("passengerEmail", _passengerEmail);
		_columnOriginalValues.put("username", _username);
		_columnOriginalValues.put("password_", _password);
		_columnOriginalValues.put("accountStatus", _accountStatus);
		_columnOriginalValues.put("userId", _userId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("password_", "password");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("passengerId", 1L);

		columnBitmasks.put("passengerName", 2L);

		columnBitmasks.put("passengerContact", 4L);

		columnBitmasks.put("passengerEmail", 8L);

		columnBitmasks.put("username", 16L);

		columnBitmasks.put("password_", 32L);

		columnBitmasks.put("accountStatus", 64L);

		columnBitmasks.put("userId", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Passenger _escapedModel;

}