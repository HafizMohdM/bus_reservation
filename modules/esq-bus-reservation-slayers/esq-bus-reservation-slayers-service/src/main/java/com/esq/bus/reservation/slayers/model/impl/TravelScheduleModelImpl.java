/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.esq.bus.reservation.slayers.model.impl;

import com.esq.bus.reservation.slayers.model.TravelSchedule;
import com.esq.bus.reservation.slayers.model.TravelScheduleModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TravelSchedule service. Represents a row in the &quot;BOOKRESERVATION_TravelSchedule&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TravelScheduleModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TravelScheduleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TravelScheduleImpl
 * @generated
 */
public class TravelScheduleModelImpl
	extends BaseModelImpl<TravelSchedule> implements TravelScheduleModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a travel schedule model instance should use the <code>TravelSchedule</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOOKRESERVATION_TravelSchedule";

	public static final Object[][] TABLE_COLUMNS = {
		{"scheduleId", Types.BIGINT}, {"busId", Types.BIGINT},
		{"driverId", Types.BIGINT}, {"startingPoint", Types.VARCHAR},
		{"destination", Types.VARCHAR}, {"scheduleDate", Types.TIMESTAMP},
		{"departureTime", Types.TIMESTAMP},
		{"estimatedArrivalTime", Types.TIMESTAMP}, {"fareAmount", Types.DOUBLE},
		{"remarks", Types.VARCHAR}, {"userId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("scheduleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("busId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("driverId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startingPoint", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("destination", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scheduleDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("departureTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("estimatedArrivalTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fareAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOOKRESERVATION_TravelSchedule (scheduleId LONG not null primary key,busId LONG,driverId LONG,startingPoint VARCHAR(75) null,destination VARCHAR(75) null,scheduleDate DATE null,departureTime DATE null,estimatedArrivalTime DATE null,fareAmount DOUBLE,remarks VARCHAR(75) null,userId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table BOOKRESERVATION_TravelSchedule";

	public static final String ORDER_BY_JPQL =
		" ORDER BY travelSchedule.scheduleId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOOKRESERVATION_TravelSchedule.scheduleId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BUSID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SCHEDULEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TravelScheduleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _scheduleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setScheduleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _scheduleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TravelSchedule.class;
	}

	@Override
	public String getModelClassName() {
		return TravelSchedule.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TravelSchedule, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TravelSchedule, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TravelSchedule, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TravelSchedule)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TravelSchedule, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TravelSchedule, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TravelSchedule)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TravelSchedule, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TravelSchedule, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<TravelSchedule, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TravelSchedule, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TravelSchedule, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<TravelSchedule, Object>>();
		Map<String, BiConsumer<TravelSchedule, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TravelSchedule, ?>>();

		attributeGetterFunctions.put(
			"scheduleId", TravelSchedule::getScheduleId);
		attributeSetterBiConsumers.put(
			"scheduleId",
			(BiConsumer<TravelSchedule, Long>)TravelSchedule::setScheduleId);
		attributeGetterFunctions.put("busId", TravelSchedule::getBusId);
		attributeSetterBiConsumers.put(
			"busId",
			(BiConsumer<TravelSchedule, Long>)TravelSchedule::setBusId);
		attributeGetterFunctions.put("driverId", TravelSchedule::getDriverId);
		attributeSetterBiConsumers.put(
			"driverId",
			(BiConsumer<TravelSchedule, Long>)TravelSchedule::setDriverId);
		attributeGetterFunctions.put(
			"startingPoint", TravelSchedule::getStartingPoint);
		attributeSetterBiConsumers.put(
			"startingPoint",
			(BiConsumer<TravelSchedule, String>)
				TravelSchedule::setStartingPoint);
		attributeGetterFunctions.put(
			"destination", TravelSchedule::getDestination);
		attributeSetterBiConsumers.put(
			"destination",
			(BiConsumer<TravelSchedule, String>)TravelSchedule::setDestination);
		attributeGetterFunctions.put(
			"scheduleDate", TravelSchedule::getScheduleDate);
		attributeSetterBiConsumers.put(
			"scheduleDate",
			(BiConsumer<TravelSchedule, Date>)TravelSchedule::setScheduleDate);
		attributeGetterFunctions.put(
			"departureTime", TravelSchedule::getDepartureTime);
		attributeSetterBiConsumers.put(
			"departureTime",
			(BiConsumer<TravelSchedule, Date>)TravelSchedule::setDepartureTime);
		attributeGetterFunctions.put(
			"estimatedArrivalTime", TravelSchedule::getEstimatedArrivalTime);
		attributeSetterBiConsumers.put(
			"estimatedArrivalTime",
			(BiConsumer<TravelSchedule, Date>)
				TravelSchedule::setEstimatedArrivalTime);
		attributeGetterFunctions.put(
			"fareAmount", TravelSchedule::getFareAmount);
		attributeSetterBiConsumers.put(
			"fareAmount",
			(BiConsumer<TravelSchedule, Double>)TravelSchedule::setFareAmount);
		attributeGetterFunctions.put("remarks", TravelSchedule::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<TravelSchedule, String>)TravelSchedule::setRemarks);
		attributeGetterFunctions.put("userId", TravelSchedule::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<TravelSchedule, Long>)TravelSchedule::setUserId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getScheduleId() {
		return _scheduleId;
	}

	@Override
	public void setScheduleId(long scheduleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scheduleId = scheduleId;
	}

	@Override
	public long getBusId() {
		return _busId;
	}

	@Override
	public void setBusId(long busId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_busId = busId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalBusId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("busId"));
	}

	@Override
	public long getDriverId() {
		return _driverId;
	}

	@Override
	public void setDriverId(long driverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverId = driverId;
	}

	@Override
	public String getStartingPoint() {
		if (_startingPoint == null) {
			return "";
		}
		else {
			return _startingPoint;
		}
	}

	@Override
	public void setStartingPoint(String startingPoint) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startingPoint = startingPoint;
	}

	@Override
	public String getDestination() {
		if (_destination == null) {
			return "";
		}
		else {
			return _destination;
		}
	}

	@Override
	public void setDestination(String destination) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_destination = destination;
	}

	@Override
	public Date getScheduleDate() {
		return _scheduleDate;
	}

	@Override
	public void setScheduleDate(Date scheduleDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scheduleDate = scheduleDate;
	}

	@Override
	public Date getDepartureTime() {
		return _departureTime;
	}

	@Override
	public void setDepartureTime(Date departureTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_departureTime = departureTime;
	}

	@Override
	public Date getEstimatedArrivalTime() {
		return _estimatedArrivalTime;
	}

	@Override
	public void setEstimatedArrivalTime(Date estimatedArrivalTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_estimatedArrivalTime = estimatedArrivalTime;
	}

	@Override
	public double getFareAmount() {
		return _fareAmount;
	}

	@Override
	public void setFareAmount(double fareAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fareAmount = fareAmount;
	}

	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, TravelSchedule.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TravelSchedule toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TravelSchedule>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TravelScheduleImpl travelScheduleImpl = new TravelScheduleImpl();

		travelScheduleImpl.setScheduleId(getScheduleId());
		travelScheduleImpl.setBusId(getBusId());
		travelScheduleImpl.setDriverId(getDriverId());
		travelScheduleImpl.setStartingPoint(getStartingPoint());
		travelScheduleImpl.setDestination(getDestination());
		travelScheduleImpl.setScheduleDate(getScheduleDate());
		travelScheduleImpl.setDepartureTime(getDepartureTime());
		travelScheduleImpl.setEstimatedArrivalTime(getEstimatedArrivalTime());
		travelScheduleImpl.setFareAmount(getFareAmount());
		travelScheduleImpl.setRemarks(getRemarks());
		travelScheduleImpl.setUserId(getUserId());

		travelScheduleImpl.resetOriginalValues();

		return travelScheduleImpl;
	}

	@Override
	public TravelSchedule cloneWithOriginalValues() {
		TravelScheduleImpl travelScheduleImpl = new TravelScheduleImpl();

		travelScheduleImpl.setScheduleId(
			this.<Long>getColumnOriginalValue("scheduleId"));
		travelScheduleImpl.setBusId(this.<Long>getColumnOriginalValue("busId"));
		travelScheduleImpl.setDriverId(
			this.<Long>getColumnOriginalValue("driverId"));
		travelScheduleImpl.setStartingPoint(
			this.<String>getColumnOriginalValue("startingPoint"));
		travelScheduleImpl.setDestination(
			this.<String>getColumnOriginalValue("destination"));
		travelScheduleImpl.setScheduleDate(
			this.<Date>getColumnOriginalValue("scheduleDate"));
		travelScheduleImpl.setDepartureTime(
			this.<Date>getColumnOriginalValue("departureTime"));
		travelScheduleImpl.setEstimatedArrivalTime(
			this.<Date>getColumnOriginalValue("estimatedArrivalTime"));
		travelScheduleImpl.setFareAmount(
			this.<Double>getColumnOriginalValue("fareAmount"));
		travelScheduleImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		travelScheduleImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));

		return travelScheduleImpl;
	}

	@Override
	public int compareTo(TravelSchedule travelSchedule) {
		long primaryKey = travelSchedule.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TravelSchedule)) {
			return false;
		}

		TravelSchedule travelSchedule = (TravelSchedule)object;

		long primaryKey = travelSchedule.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TravelSchedule> toCacheModel() {
		TravelScheduleCacheModel travelScheduleCacheModel =
			new TravelScheduleCacheModel();

		travelScheduleCacheModel.scheduleId = getScheduleId();

		travelScheduleCacheModel.busId = getBusId();

		travelScheduleCacheModel.driverId = getDriverId();

		travelScheduleCacheModel.startingPoint = getStartingPoint();

		String startingPoint = travelScheduleCacheModel.startingPoint;

		if ((startingPoint != null) && (startingPoint.length() == 0)) {
			travelScheduleCacheModel.startingPoint = null;
		}

		travelScheduleCacheModel.destination = getDestination();

		String destination = travelScheduleCacheModel.destination;

		if ((destination != null) && (destination.length() == 0)) {
			travelScheduleCacheModel.destination = null;
		}

		Date scheduleDate = getScheduleDate();

		if (scheduleDate != null) {
			travelScheduleCacheModel.scheduleDate = scheduleDate.getTime();
		}
		else {
			travelScheduleCacheModel.scheduleDate = Long.MIN_VALUE;
		}

		Date departureTime = getDepartureTime();

		if (departureTime != null) {
			travelScheduleCacheModel.departureTime = departureTime.getTime();
		}
		else {
			travelScheduleCacheModel.departureTime = Long.MIN_VALUE;
		}

		Date estimatedArrivalTime = getEstimatedArrivalTime();

		if (estimatedArrivalTime != null) {
			travelScheduleCacheModel.estimatedArrivalTime =
				estimatedArrivalTime.getTime();
		}
		else {
			travelScheduleCacheModel.estimatedArrivalTime = Long.MIN_VALUE;
		}

		travelScheduleCacheModel.fareAmount = getFareAmount();

		travelScheduleCacheModel.remarks = getRemarks();

		String remarks = travelScheduleCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			travelScheduleCacheModel.remarks = null;
		}

		travelScheduleCacheModel.userId = getUserId();

		return travelScheduleCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TravelSchedule, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TravelSchedule, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TravelSchedule, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((TravelSchedule)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TravelSchedule>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					TravelSchedule.class, ModelWrapper.class);

	}

	private long _scheduleId;
	private long _busId;
	private long _driverId;
	private String _startingPoint;
	private String _destination;
	private Date _scheduleDate;
	private Date _departureTime;
	private Date _estimatedArrivalTime;
	private double _fareAmount;
	private String _remarks;
	private long _userId;

	public <T> T getColumnValue(String columnName) {
		Function<TravelSchedule, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TravelSchedule)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("scheduleId", _scheduleId);
		_columnOriginalValues.put("busId", _busId);
		_columnOriginalValues.put("driverId", _driverId);
		_columnOriginalValues.put("startingPoint", _startingPoint);
		_columnOriginalValues.put("destination", _destination);
		_columnOriginalValues.put("scheduleDate", _scheduleDate);
		_columnOriginalValues.put("departureTime", _departureTime);
		_columnOriginalValues.put(
			"estimatedArrivalTime", _estimatedArrivalTime);
		_columnOriginalValues.put("fareAmount", _fareAmount);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("userId", _userId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("scheduleId", 1L);

		columnBitmasks.put("busId", 2L);

		columnBitmasks.put("driverId", 4L);

		columnBitmasks.put("startingPoint", 8L);

		columnBitmasks.put("destination", 16L);

		columnBitmasks.put("scheduleDate", 32L);

		columnBitmasks.put("departureTime", 64L);

		columnBitmasks.put("estimatedArrivalTime", 128L);

		columnBitmasks.put("fareAmount", 256L);

		columnBitmasks.put("remarks", 512L);

		columnBitmasks.put("userId", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TravelSchedule _escapedModel;

}