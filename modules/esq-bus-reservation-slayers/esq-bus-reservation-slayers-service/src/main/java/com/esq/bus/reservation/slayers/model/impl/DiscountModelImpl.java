/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.esq.bus.reservation.slayers.model.impl;

import com.esq.bus.reservation.slayers.model.Discount;
import com.esq.bus.reservation.slayers.model.DiscountModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Discount service. Represents a row in the &quot;BOOKRESERVATION_Discount&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DiscountModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DiscountImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DiscountImpl
 * @generated
 */
public class DiscountModelImpl
	extends BaseModelImpl<Discount> implements DiscountModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a discount model instance should use the <code>Discount</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOOKRESERVATION_Discount";

	public static final Object[][] TABLE_COLUMNS = {
		{"discountId", Types.BIGINT}, {"code_", Types.VARCHAR},
		{"percentage", Types.DOUBLE}, {"validFrom", Types.TIMESTAMP},
		{"validTo", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("discountId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("percentage", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("validFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("validTo", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOOKRESERVATION_Discount (discountId LONG not null primary key,code_ VARCHAR(75) null,percentage DOUBLE,validFrom DATE null,validTo DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table BOOKRESERVATION_Discount";

	public static final String ORDER_BY_JPQL =
		" ORDER BY discount.discountId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOOKRESERVATION_Discount.discountId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DISCOUNTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DiscountModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _discountId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDiscountId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _discountId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Discount.class;
	}

	@Override
	public String getModelClassName() {
		return Discount.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Discount, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Discount, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Discount, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Discount)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Discount, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Discount, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Discount)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Discount, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Discount, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Discount, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Discount, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Discount, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Discount, Object>>();
		Map<String, BiConsumer<Discount, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Discount, ?>>();

		attributeGetterFunctions.put("discountId", Discount::getDiscountId);
		attributeSetterBiConsumers.put(
			"discountId", (BiConsumer<Discount, Long>)Discount::setDiscountId);
		attributeGetterFunctions.put("code", Discount::getCode);
		attributeSetterBiConsumers.put(
			"code", (BiConsumer<Discount, String>)Discount::setCode);
		attributeGetterFunctions.put("percentage", Discount::getPercentage);
		attributeSetterBiConsumers.put(
			"percentage",
			(BiConsumer<Discount, Double>)Discount::setPercentage);
		attributeGetterFunctions.put("validFrom", Discount::getValidFrom);
		attributeSetterBiConsumers.put(
			"validFrom", (BiConsumer<Discount, Date>)Discount::setValidFrom);
		attributeGetterFunctions.put("validTo", Discount::getValidTo);
		attributeSetterBiConsumers.put(
			"validTo", (BiConsumer<Discount, Date>)Discount::setValidTo);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getDiscountId() {
		return _discountId;
	}

	@Override
	public void setDiscountId(long discountId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_discountId = discountId;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_code = code;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCode() {
		return getColumnOriginalValue("code_");
	}

	@Override
	public double getPercentage() {
		return _percentage;
	}

	@Override
	public void setPercentage(double percentage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_percentage = percentage;
	}

	@Override
	public Date getValidFrom() {
		return _validFrom;
	}

	@Override
	public void setValidFrom(Date validFrom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_validFrom = validFrom;
	}

	@Override
	public Date getValidTo() {
		return _validTo;
	}

	@Override
	public void setValidTo(Date validTo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_validTo = validTo;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Discount.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Discount toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Discount>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DiscountImpl discountImpl = new DiscountImpl();

		discountImpl.setDiscountId(getDiscountId());
		discountImpl.setCode(getCode());
		discountImpl.setPercentage(getPercentage());
		discountImpl.setValidFrom(getValidFrom());
		discountImpl.setValidTo(getValidTo());

		discountImpl.resetOriginalValues();

		return discountImpl;
	}

	@Override
	public Discount cloneWithOriginalValues() {
		DiscountImpl discountImpl = new DiscountImpl();

		discountImpl.setDiscountId(
			this.<Long>getColumnOriginalValue("discountId"));
		discountImpl.setCode(this.<String>getColumnOriginalValue("code_"));
		discountImpl.setPercentage(
			this.<Double>getColumnOriginalValue("percentage"));
		discountImpl.setValidFrom(
			this.<Date>getColumnOriginalValue("validFrom"));
		discountImpl.setValidTo(this.<Date>getColumnOriginalValue("validTo"));

		return discountImpl;
	}

	@Override
	public int compareTo(Discount discount) {
		long primaryKey = discount.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Discount)) {
			return false;
		}

		Discount discount = (Discount)object;

		long primaryKey = discount.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Discount> toCacheModel() {
		DiscountCacheModel discountCacheModel = new DiscountCacheModel();

		discountCacheModel.discountId = getDiscountId();

		discountCacheModel.code = getCode();

		String code = discountCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			discountCacheModel.code = null;
		}

		discountCacheModel.percentage = getPercentage();

		Date validFrom = getValidFrom();

		if (validFrom != null) {
			discountCacheModel.validFrom = validFrom.getTime();
		}
		else {
			discountCacheModel.validFrom = Long.MIN_VALUE;
		}

		Date validTo = getValidTo();

		if (validTo != null) {
			discountCacheModel.validTo = validTo.getTime();
		}
		else {
			discountCacheModel.validTo = Long.MIN_VALUE;
		}

		return discountCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Discount, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Discount, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Discount, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Discount)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Discount>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Discount.class, ModelWrapper.class);

	}

	private long _discountId;
	private String _code;
	private double _percentage;
	private Date _validFrom;
	private Date _validTo;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Discount, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Discount)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("discountId", _discountId);
		_columnOriginalValues.put("code_", _code);
		_columnOriginalValues.put("percentage", _percentage);
		_columnOriginalValues.put("validFrom", _validFrom);
		_columnOriginalValues.put("validTo", _validTo);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("code_", "code");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("discountId", 1L);

		columnBitmasks.put("code_", 2L);

		columnBitmasks.put("percentage", 4L);

		columnBitmasks.put("validFrom", 8L);

		columnBitmasks.put("validTo", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Discount _escapedModel;

}