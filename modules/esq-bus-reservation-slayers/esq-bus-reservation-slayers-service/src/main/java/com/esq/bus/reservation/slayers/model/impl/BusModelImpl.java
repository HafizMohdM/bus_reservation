/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.esq.bus.reservation.slayers.model.impl;

import com.esq.bus.reservation.slayers.model.Bus;
import com.esq.bus.reservation.slayers.model.BusModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Bus service. Represents a row in the &quot;BOOKRESERVATION_Bus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BusModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BusImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BusImpl
 * @generated
 */
public class BusModelImpl extends BaseModelImpl<Bus> implements BusModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bus model instance should use the <code>Bus</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOOKRESERVATION_Bus";

	public static final Object[][] TABLE_COLUMNS = {
		{"busId", Types.BIGINT}, {"busNumber", Types.VARCHAR},
		{"busPlateNumber", Types.VARCHAR}, {"busType", Types.INTEGER},
		{"capacity", Types.INTEGER}, {"userId", Types.BIGINT},
		{"image1", Types.VARCHAR}, {"image2", Types.VARCHAR},
		{"image3", Types.VARCHAR}, {"image4", Types.VARCHAR},
		{"image5", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("busId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("busNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("busPlateNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("busType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("capacity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("image1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image4", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image5", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOOKRESERVATION_Bus (busId LONG not null primary key,busNumber VARCHAR(75) null,busPlateNumber VARCHAR(75) null,busType INTEGER,capacity INTEGER,userId LONG,image1 VARCHAR(75) null,image2 VARCHAR(75) null,image3 VARCHAR(75) null,image4 VARCHAR(75) null,image5 VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table BOOKRESERVATION_Bus";

	public static final String ORDER_BY_JPQL = " ORDER BY bus.busId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOOKRESERVATION_Bus.busId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BUSID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BusModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _busId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBusId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _busId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Bus.class;
	}

	@Override
	public String getModelClassName() {
		return Bus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Bus, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Bus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Bus, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Bus)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Bus, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Bus, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Bus)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Bus, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Bus, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Bus, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Bus, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Bus, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Bus, Object>>();
		Map<String, BiConsumer<Bus, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Bus, ?>>();

		attributeGetterFunctions.put("busId", Bus::getBusId);
		attributeSetterBiConsumers.put(
			"busId", (BiConsumer<Bus, Long>)Bus::setBusId);
		attributeGetterFunctions.put("busNumber", Bus::getBusNumber);
		attributeSetterBiConsumers.put(
			"busNumber", (BiConsumer<Bus, String>)Bus::setBusNumber);
		attributeGetterFunctions.put("busPlateNumber", Bus::getBusPlateNumber);
		attributeSetterBiConsumers.put(
			"busPlateNumber", (BiConsumer<Bus, String>)Bus::setBusPlateNumber);
		attributeGetterFunctions.put("busType", Bus::getBusType);
		attributeSetterBiConsumers.put(
			"busType", (BiConsumer<Bus, Integer>)Bus::setBusType);
		attributeGetterFunctions.put("capacity", Bus::getCapacity);
		attributeSetterBiConsumers.put(
			"capacity", (BiConsumer<Bus, Integer>)Bus::setCapacity);
		attributeGetterFunctions.put("userId", Bus::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Bus, Long>)Bus::setUserId);
		attributeGetterFunctions.put("image1", Bus::getImage1);
		attributeSetterBiConsumers.put(
			"image1", (BiConsumer<Bus, String>)Bus::setImage1);
		attributeGetterFunctions.put("image2", Bus::getImage2);
		attributeSetterBiConsumers.put(
			"image2", (BiConsumer<Bus, String>)Bus::setImage2);
		attributeGetterFunctions.put("image3", Bus::getImage3);
		attributeSetterBiConsumers.put(
			"image3", (BiConsumer<Bus, String>)Bus::setImage3);
		attributeGetterFunctions.put("image4", Bus::getImage4);
		attributeSetterBiConsumers.put(
			"image4", (BiConsumer<Bus, String>)Bus::setImage4);
		attributeGetterFunctions.put("image5", Bus::getImage5);
		attributeSetterBiConsumers.put(
			"image5", (BiConsumer<Bus, String>)Bus::setImage5);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getBusId() {
		return _busId;
	}

	@Override
	public void setBusId(long busId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_busId = busId;
	}

	@Override
	public String getBusNumber() {
		if (_busNumber == null) {
			return "";
		}
		else {
			return _busNumber;
		}
	}

	@Override
	public void setBusNumber(String busNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_busNumber = busNumber;
	}

	@Override
	public String getBusPlateNumber() {
		if (_busPlateNumber == null) {
			return "";
		}
		else {
			return _busPlateNumber;
		}
	}

	@Override
	public void setBusPlateNumber(String busPlateNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_busPlateNumber = busPlateNumber;
	}

	@Override
	public int getBusType() {
		return _busType;
	}

	@Override
	public void setBusType(int busType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_busType = busType;
	}

	@Override
	public int getCapacity() {
		return _capacity;
	}

	@Override
	public void setCapacity(int capacity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_capacity = capacity;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@Override
	public String getImage1() {
		if (_image1 == null) {
			return "";
		}
		else {
			return _image1;
		}
	}

	@Override
	public void setImage1(String image1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_image1 = image1;
	}

	@Override
	public String getImage2() {
		if (_image2 == null) {
			return "";
		}
		else {
			return _image2;
		}
	}

	@Override
	public void setImage2(String image2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_image2 = image2;
	}

	@Override
	public String getImage3() {
		if (_image3 == null) {
			return "";
		}
		else {
			return _image3;
		}
	}

	@Override
	public void setImage3(String image3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_image3 = image3;
	}

	@Override
	public String getImage4() {
		if (_image4 == null) {
			return "";
		}
		else {
			return _image4;
		}
	}

	@Override
	public void setImage4(String image4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_image4 = image4;
	}

	@Override
	public String getImage5() {
		if (_image5 == null) {
			return "";
		}
		else {
			return _image5;
		}
	}

	@Override
	public void setImage5(String image5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_image5 = image5;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Bus.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Bus toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Bus> escapedModelProxyProviderFunction =
				EscapedModelProxyProviderFunctionHolder.
					_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BusImpl busImpl = new BusImpl();

		busImpl.setBusId(getBusId());
		busImpl.setBusNumber(getBusNumber());
		busImpl.setBusPlateNumber(getBusPlateNumber());
		busImpl.setBusType(getBusType());
		busImpl.setCapacity(getCapacity());
		busImpl.setUserId(getUserId());
		busImpl.setImage1(getImage1());
		busImpl.setImage2(getImage2());
		busImpl.setImage3(getImage3());
		busImpl.setImage4(getImage4());
		busImpl.setImage5(getImage5());

		busImpl.resetOriginalValues();

		return busImpl;
	}

	@Override
	public Bus cloneWithOriginalValues() {
		BusImpl busImpl = new BusImpl();

		busImpl.setBusId(this.<Long>getColumnOriginalValue("busId"));
		busImpl.setBusNumber(this.<String>getColumnOriginalValue("busNumber"));
		busImpl.setBusPlateNumber(
			this.<String>getColumnOriginalValue("busPlateNumber"));
		busImpl.setBusType(this.<Integer>getColumnOriginalValue("busType"));
		busImpl.setCapacity(this.<Integer>getColumnOriginalValue("capacity"));
		busImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		busImpl.setImage1(this.<String>getColumnOriginalValue("image1"));
		busImpl.setImage2(this.<String>getColumnOriginalValue("image2"));
		busImpl.setImage3(this.<String>getColumnOriginalValue("image3"));
		busImpl.setImage4(this.<String>getColumnOriginalValue("image4"));
		busImpl.setImage5(this.<String>getColumnOriginalValue("image5"));

		return busImpl;
	}

	@Override
	public int compareTo(Bus bus) {
		long primaryKey = bus.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Bus)) {
			return false;
		}

		Bus bus = (Bus)object;

		long primaryKey = bus.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Bus> toCacheModel() {
		BusCacheModel busCacheModel = new BusCacheModel();

		busCacheModel.busId = getBusId();

		busCacheModel.busNumber = getBusNumber();

		String busNumber = busCacheModel.busNumber;

		if ((busNumber != null) && (busNumber.length() == 0)) {
			busCacheModel.busNumber = null;
		}

		busCacheModel.busPlateNumber = getBusPlateNumber();

		String busPlateNumber = busCacheModel.busPlateNumber;

		if ((busPlateNumber != null) && (busPlateNumber.length() == 0)) {
			busCacheModel.busPlateNumber = null;
		}

		busCacheModel.busType = getBusType();

		busCacheModel.capacity = getCapacity();

		busCacheModel.userId = getUserId();

		busCacheModel.image1 = getImage1();

		String image1 = busCacheModel.image1;

		if ((image1 != null) && (image1.length() == 0)) {
			busCacheModel.image1 = null;
		}

		busCacheModel.image2 = getImage2();

		String image2 = busCacheModel.image2;

		if ((image2 != null) && (image2.length() == 0)) {
			busCacheModel.image2 = null;
		}

		busCacheModel.image3 = getImage3();

		String image3 = busCacheModel.image3;

		if ((image3 != null) && (image3.length() == 0)) {
			busCacheModel.image3 = null;
		}

		busCacheModel.image4 = getImage4();

		String image4 = busCacheModel.image4;

		if ((image4 != null) && (image4.length() == 0)) {
			busCacheModel.image4 = null;
		}

		busCacheModel.image5 = getImage5();

		String image5 = busCacheModel.image5;

		if ((image5 != null) && (image5.length() == 0)) {
			busCacheModel.image5 = null;
		}

		return busCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Bus, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Bus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Bus, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Bus)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Bus>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Bus.class, ModelWrapper.class);

	}

	private long _busId;
	private String _busNumber;
	private String _busPlateNumber;
	private int _busType;
	private int _capacity;
	private long _userId;
	private String _image1;
	private String _image2;
	private String _image3;
	private String _image4;
	private String _image5;

	public <T> T getColumnValue(String columnName) {
		Function<Bus, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Bus)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("busId", _busId);
		_columnOriginalValues.put("busNumber", _busNumber);
		_columnOriginalValues.put("busPlateNumber", _busPlateNumber);
		_columnOriginalValues.put("busType", _busType);
		_columnOriginalValues.put("capacity", _capacity);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("image1", _image1);
		_columnOriginalValues.put("image2", _image2);
		_columnOriginalValues.put("image3", _image3);
		_columnOriginalValues.put("image4", _image4);
		_columnOriginalValues.put("image5", _image5);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("busId", 1L);

		columnBitmasks.put("busNumber", 2L);

		columnBitmasks.put("busPlateNumber", 4L);

		columnBitmasks.put("busType", 8L);

		columnBitmasks.put("capacity", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("image1", 64L);

		columnBitmasks.put("image2", 128L);

		columnBitmasks.put("image3", 256L);

		columnBitmasks.put("image4", 512L);

		columnBitmasks.put("image5", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Bus _escapedModel;

}