/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.esq.bus.reservation.slayers.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the Driver service. Represents a row in the &quot;BOOKRESERVATION_Driver&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.esq.bus.reservation.slayers.model.impl.DriverModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.esq.bus.reservation.slayers.model.impl.DriverImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Driver
 * @generated
 */
@ProviderType
public interface DriverModel extends BaseModel<Driver> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a driver model instance should use the {@link Driver} interface instead.
	 */

	/**
	 * Returns the primary key of this driver.
	 *
	 * @return the primary key of this driver
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this driver.
	 *
	 * @param primaryKey the primary key of this driver
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the driver ID of this driver.
	 *
	 * @return the driver ID of this driver
	 */
	public long getDriverId();

	/**
	 * Sets the driver ID of this driver.
	 *
	 * @param driverId the driver ID of this driver
	 */
	public void setDriverId(long driverId);

	/**
	 * Returns the driver name of this driver.
	 *
	 * @return the driver name of this driver
	 */
	@AutoEscape
	public String getDriverName();

	/**
	 * Sets the driver name of this driver.
	 *
	 * @param driverName the driver name of this driver
	 */
	public void setDriverName(String driverName);

	/**
	 * Returns the driver contact of this driver.
	 *
	 * @return the driver contact of this driver
	 */
	@AutoEscape
	public String getDriverContact();

	/**
	 * Sets the driver contact of this driver.
	 *
	 * @param driverContact the driver contact of this driver
	 */
	public void setDriverContact(String driverContact);

	/**
	 * Returns the user ID of this driver.
	 *
	 * @return the user ID of this driver
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this driver.
	 *
	 * @param userId the user ID of this driver
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this driver.
	 *
	 * @return the user uuid of this driver
	 */
	public String getUserUuid();

	/**
	 * Sets the user uuid of this driver.
	 *
	 * @param userUuid the user uuid of this driver
	 */
	public void setUserUuid(String userUuid);

	@Override
	public Driver cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}